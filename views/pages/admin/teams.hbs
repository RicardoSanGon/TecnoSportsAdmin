<!-- Gestión de Equipos - Diseño Moderno con Colores Verdes -->
<div class="min-h-screen bg-gradient-to-br from-primary-50 via-primary-100 to-primary-200">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

    <!-- Header Section -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-4xl font-bold text-gray-900 mb-2">
            <i class="fas fa-shield-alt mr-3 text-primary-600"></i>
            Gestión de <span class="bg-gradient-to-r from-primary-400 to-primary-600 bg-clip-text text-transparent">Equipos</span>
          </h1>
          <p class="text-lg text-gray-600">Administrar equipos y confederaciones</p>
        </div>
        <button id="add-team-btn" class="bg-primary-600 text-white px-6 py-3 rounded-lg hover:bg-primary-700 transition-colors duration-200 shadow-lg">
          <i class="fas fa-plus mr-2"></i>Agregar Equipo
        </button>
      </div>
    </div>

    <!-- Tabla de equipos -->
    <div class="bg-white rounded-lg shadow-lg">
      <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <h2 class="text-xl font-semibold text-gray-800">Lista de Equipos</h2>
        </div>
      </div>

      <div class="p-6 overflow-x-auto">
        <table id="teamsTable" class="w-full text-sm text-left">
          <thead class="text-xs text-gray-700 uppercase bg-gray-50">
            <tr>
              <th class="px-6 py-3">ID</th>
              <th class="px-6 py-3">Nombre</th>
              <th class="px-6 py-3">Confederación</th>
              <th class="px-6 py-3">Logo</th>
              <th class="px-6 py-3">Estado</th>
              <th class="px-6 py-3">Registro</th>
              <th class="px-6 py-3 text-center">Acciones</th>
            </tr>
          </thead>
          <tbody>
            {{#each teams}}
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 font-medium">#{{this.id}}</td>
                <td class="px-6 py-4 font-semibold">{{this.name}}</td>
                <td class="px-6 py-4">
                  {{#if this.confederation}}
                    {{this.confederation.name}}
                  {{else}}
                    ID: {{this.confederationId}}
                  {{/if}}
                </td>
                <td class="px-6 py-4">
                  {{#if this.logoUrl}}
                    <div class="flex items-center justify-center">
                      <img src="{{this.logoUrl}}" 
                          alt="{{this.name}}" 
                          class="w-12 h-12 object-cover rounded-lg border border-gray-200 shadow-sm"
                          style="min-width: 48px; min-height: 48px; max-width: 48px; max-height: 48px;"
                          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                      <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center text-gray-400" style="display: none;">
                        <i class="fas fa-image text-sm"></i>
                      </div>
                    </div>
                  {{else}}
                    <div class="flex items-center justify-center">
                      <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center text-gray-400">
                        <i class="fas fa-image text-sm"></i>
                      </div>
                    </div>
                  {{/if}}
                </td>
                <td class="px-6 py-4">
                  {{#if this.isActive}}
                    <span class="px-3 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800">Activo</span>
                  {{else}}
                    <span class="px-3 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800">Inactivo</span>
                  {{/if}}
                </td>
                <td class="px-6 py-4 text-gray-500">{{this.created_at}}</td>
                <td class="px-6 py-4 text-center">
                  <div class="flex gap-2 justify-center">
                    <button onclick="editTeam({{this.id}})" class="p-2 text-primary-600 hover:text-white hover:bg-primary-600 rounded-lg transition-all duration-200" title="Editar">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button onclick="deleteTeam({{this.id}})" class="p-2 text-red-600 hover:text-white hover:bg-red-600 rounded-lg transition-all duration-200" title="Eliminar">
                      <i class="fas fa-trash"></i>
                    </button>
                  </div>
                </td>
              </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Teams - Centrado y más pequeño -->
<div id="team-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900 bg-opacity-50">
  <div class="relative w-full max-w-lg bg-white rounded-lg shadow-xl">
    <!-- Modal header -->
    <div class="flex items-center justify-between p-4 border-b rounded-t">
      <h3 class="text-lg font-semibold text-gray-900" id="team-modal-title">
        Agregar Nuevo Equipo
      </h3>
      <button type="button" id="team-modal-close-btn" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5">
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
    <!-- Modal body -->
    <div class="p-4">
      <form id="team-form">
        <input type="hidden" id="team-id" value="">
        <div class="space-y-4">
          <div>
            <label for="team-name" class="block text-sm font-medium text-gray-700 mb-1">Nombre del Equipo</label>
            <input type="text" id="team-name" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500" required>
          </div>
          <div>
            <label for="team-confederation" class="block text-sm font-medium text-gray-700 mb-1">Confederación</label>
            <select id="team-confederation" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500" required>
              <option value="">Cargando confederaciones...</option>
            </select>
          </div>
          <div>
            <label for="team-logo" class="block text-sm font-medium text-gray-700 mb-1">URL del Logo</label>
            <input type="url" id="team-logo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500" placeholder="https://ejemplo.com/logo.png">
          </div>
        </div>
        <div class="mt-6 flex gap-3">
          <button type="submit" class="flex-1 bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors duration-200">
            <i class="fas fa-save mr-2"></i>Guardar
          </button>
          <button type="button" id="cancel-btn" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors duration-200">
            Cancelar
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
// Variables globales
let confederationsData = [];
let isModalOpen = false;

// Funciones globales que deben estar disponibles desde el HTML
window.editTeam = function(id) {
  console.log('Edit team called with ID:', id);
  fetchTeamData(id);
};

window.deleteTeam = function(id) {
  console.log('Delete team called with ID:', id);
  if (confirm('¿Estás seguro de que quieres eliminar este equipo? Esta acción no se puede deshacer.')) {
    deleteTeamById(id);
  }
};

// Función para obtener el nombre de la confederación por ID
function getConfederationName(id) {
  const confederation = confederationsData.find(c => c.id == id);
  return confederation ? confederation.name : `ID: ${id}`;
}

// Función para actualizar los nombres de confederaciones en la tabla
function updateConfederationNames() {
  const confederationCells = document.querySelectorAll('#teamsTable tbody tr td:nth-child(3)');
  
  confederationCells.forEach(cell => {
    const text = cell.textContent.trim();
    if (text.startsWith('ID:')) {
      const id = text.replace('ID: ', '');
      const name = getConfederationName(id);
      cell.textContent = name;
      console.log(`Updated confederation ID ${id} to name: ${name}`);
    }
  });
}

// Función para mostrar el modal
function showModal() {
  const modal = document.getElementById('team-modal');
  if (modal) {
    modal.classList.remove('hidden');
    isModalOpen = true;
    document.body.style.overflow = 'hidden';
    console.log('Modal shown');
  }
}

// Función para ocultar el modal
function hideModal() {
  const modal = document.getElementById('team-modal');
  if (modal) {
    modal.classList.add('hidden');
    isModalOpen = false;
    document.body.style.overflow = 'auto';
    console.log('Modal hidden');
    
    const form = document.getElementById('team-form');
    if (form) {
      form.reset();
      document.getElementById('team-id').value = '';
    }
  }
}

// Cargar confederaciones
async function loadConfederations() {
  const token = localStorage.getItem('authToken');
  console.log('Loading confederations...');
  
  try {
    const response = await fetch('/api/confederations', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Response status:', response.status);
    
    if (response.ok) {
      const result = await response.json();
      console.log('Full API response:', result);
      
      if (result.data && Array.isArray(result.data)) {
        confederationsData = result.data;
        console.log('Confederations loaded successfully:', confederationsData);
        populateConfederationSelect();
        
        // Actualizar nombres en la tabla
        updateConfederationNames();
      } else {
        console.error('Invalid data structure received:', result);
      }
    } else {
      console.error('Error response:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('Error details:', errorText);
    }
  } catch (error) {
    console.error('Network error loading confederations:', error);
  }
}

// Poblar el select de confederaciones
function populateConfederationSelect(selectedId = null) {
  const select = document.getElementById('team-confederation');
  if (!select) {
    console.error('Confederation select not found');
    return;
  }
  
  select.innerHTML = '<option value="">Seleccionar confederación...</option>';
  
  confederationsData.forEach(confederation => {
    const option = document.createElement('option');
    option.value = confederation.id;
    option.textContent = confederation.name;
    if (selectedId && selectedId == confederation.id) {
      option.selected = true;
    }
    select.appendChild(option);
  });
  
  console.log('Confederation select populated with', confederationsData.length, 'options');
}

// Abrir modal para agregar/editar
function openTeamModal(teamData = null) {
  const title = document.getElementById('team-modal-title');
  const nameInput = document.getElementById('team-name');
  const logoInput = document.getElementById('team-logo');
  const idInput = document.getElementById('team-id');
  
  if (title) {
    title.textContent = teamData ? 'Editar Equipo' : 'Agregar Nuevo Equipo';
  }
  
  if (nameInput) nameInput.value = teamData ? teamData.name || '' : '';
  if (logoInput) logoInput.value = teamData ? teamData.logoUrl || '' : '';
  if (idInput) idInput.value = teamData ? teamData.id || '' : '';
  
  populateConfederationSelect(teamData ? teamData.confederationId : null);
  
  showModal();
}

// Obtener datos de un equipo específico
async function fetchTeamData(id) {
  const token = localStorage.getItem('authToken');
  try {
    const response = await fetch(`/api/teams/${id}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.ok) {
      const result = await response.json();
      console.log('Team data received:', result.data);
      openTeamModal(result.data);
    } else {
      throw new Error('Error al obtener datos del equipo');
    }
  } catch (error) {
    console.error('Error fetching team:', error);
    alert('Error al cargar los datos del equipo: ' + error.message);
  }
}

// Eliminar equipo
async function deleteTeamById(id) {
  const token = localStorage.getItem('authToken');
  try {
    const response = await fetch(`/api/teams/${id}`, {
      method: 'DELETE',
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.ok) {
      alert('Equipo eliminado exitosamente');
      window.location.reload();
    } else {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Error al eliminar el equipo');
    }
  } catch (error) {
    console.error('Error deleting team:', error);
    alert('Error al eliminar el equipo: ' + error.message);
  }
}

// Guardar equipo (crear o actualizar) - CORREGIDO
async function saveTeam() {
  const token = localStorage.getItem('authToken');
  
  const id = document.getElementById('team-id').value;
  const name = document.getElementById('team-name').value.trim();
  const confederationId = document.getElementById('team-confederation').value;
  const logoUrl = document.getElementById('team-logo').value.trim();
  
  console.log('Form values:', { id, name, confederationId, logoUrl });
  
  if (!name || !confederationId) {
    alert('Por favor completa todos los campos obligatorios');
    return;
  }
  
  const method = id ? 'PATCH' : 'POST';
  const url = id ? `/api/teams/${id}` : '/api/teams';
  const body = {
    name,
    confederationId: parseInt(confederationId),
    logoUrl: logoUrl || null
  };
  
  console.log('Sending data:', body);
  
  try {
    const response = await fetch(url, {
      method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(body)
    });
    
    if (response.ok) {
      alert('Equipo guardado exitosamente');
      hideModal();
      window.location.reload();
    } else {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Error al guardar el equipo');
    }
  } catch (error) {
    console.error('Error saving team:', error);
    alert('Error al guardar el equipo: ' + error.message);
  }
}

// Inicialización cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM Content Loaded - Initializing teams page');
  
  loadConfederations();
  
  if (typeof $ !== 'undefined') {
    $('#teamsTable').DataTable({
      responsive: true,
      language: {
        url: '//cdn.datatables.net/plug-ins/1.13.7/i18n/es-ES.json'
      }
    });
  }
  
  const addBtn = document.getElementById('add-team-btn');
  if (addBtn) {
    addBtn.addEventListener('click', function() {
      console.log('Add team button clicked');
      openTeamModal();
    });
  }
  
  const closeBtn = document.getElementById('team-modal-close-btn');
  if (closeBtn) {
    closeBtn.addEventListener('click', function() {
      console.log('Close button clicked');
      hideModal();
    });
  }
  
  const cancelBtn = document.getElementById('cancel-btn');
  if (cancelBtn) {
    cancelBtn.addEventListener('click', function() {
      console.log('Cancel button clicked');
      hideModal();
    });
  }
  
  const modal = document.getElementById('team-modal');
  if (modal) {
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        console.log('Clicked outside modal');
        hideModal();
      }
    });
  }
  
  const form = document.getElementById('team-form');
  if (form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      console.log('Form submitted');
      saveTeam();
    });
  }
  
  console.log('All event listeners attached');
});
</script>
